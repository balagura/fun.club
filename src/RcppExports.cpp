// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/fun.club.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// new_arg_encoder
XPtr<Encoders > new_arg_encoder();
RcppExport SEXP _fun_club_new_arg_encoder() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(new_arg_encoder());
    return rcpp_result_gen;
END_RCPP
}
// add_arg
List add_arg(XPtr<Encoders> xptr, std::string fo, std::string arg, std::string printable_arg);
RcppExport SEXP _fun_club_add_arg(SEXP xptrSEXP, SEXP foSEXP, SEXP argSEXP, SEXP printable_argSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<Encoders> >::type xptr(xptrSEXP);
    Rcpp::traits::input_parameter< std::string >::type fo(foSEXP);
    Rcpp::traits::input_parameter< std::string >::type arg(argSEXP);
    Rcpp::traits::input_parameter< std::string >::type printable_arg(printable_argSEXP);
    rcpp_result_gen = Rcpp::wrap(add_arg(xptr, fo, arg, printable_arg));
    return rcpp_result_gen;
END_RCPP
}
// ind_arg
int ind_arg(XPtr<Encoders> xptr, std::string fo, std::string arg);
RcppExport SEXP _fun_club_ind_arg(SEXP xptrSEXP, SEXP foSEXP, SEXP argSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<Encoders> >::type xptr(xptrSEXP);
    Rcpp::traits::input_parameter< std::string >::type fo(foSEXP);
    Rcpp::traits::input_parameter< std::string >::type arg(argSEXP);
    rcpp_result_gen = Rcpp::wrap(ind_arg(xptr, fo, arg));
    return rcpp_result_gen;
END_RCPP
}
// printable_arg
CharacterVector printable_arg(XPtr<Encoders> xptr, const std::string& fo, int ind);
RcppExport SEXP _fun_club_printable_arg(SEXP xptrSEXP, SEXP foSEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<Encoders> >::type xptr(xptrSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type fo(foSEXP);
    Rcpp::traits::input_parameter< int >::type ind(indSEXP);
    rcpp_result_gen = Rcpp::wrap(printable_arg(xptr, fo, ind));
    return rcpp_result_gen;
END_RCPP
}
// serialized_arg
CharacterVector serialized_arg(XPtr<Encoders> xptr, const std::string& fo, int ind);
RcppExport SEXP _fun_club_serialized_arg(SEXP xptrSEXP, SEXP foSEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<Encoders> >::type xptr(xptrSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type fo(foSEXP);
    Rcpp::traits::input_parameter< int >::type ind(indSEXP);
    rcpp_result_gen = Rcpp::wrap(serialized_arg(xptr, fo, ind));
    return rcpp_result_gen;
END_RCPP
}
// rm_arg
int rm_arg(XPtr<Encoders> xptr, std::string fo, int ind);
RcppExport SEXP _fun_club_rm_arg(SEXP xptrSEXP, SEXP foSEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<Encoders> >::type xptr(xptrSEXP);
    Rcpp::traits::input_parameter< std::string >::type fo(foSEXP);
    Rcpp::traits::input_parameter< int >::type ind(indSEXP);
    rcpp_result_gen = Rcpp::wrap(rm_arg(xptr, fo, ind));
    return rcpp_result_gen;
END_RCPP
}
// load_fo_arg
void load_fo_arg(XPtr<Encoders> xptr, std::string fo_name, std::vector<std::string> args, std::vector<std::string> printable_args, std::vector<int> inds);
RcppExport SEXP _fun_club_load_fo_arg(SEXP xptrSEXP, SEXP fo_nameSEXP, SEXP argsSEXP, SEXP printable_argsSEXP, SEXP indsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<Encoders> >::type xptr(xptrSEXP);
    Rcpp::traits::input_parameter< std::string >::type fo_name(fo_nameSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type args(argsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type printable_args(printable_argsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type inds(indsSEXP);
    load_fo_arg(xptr, fo_name, args, printable_args, inds);
    return R_NilValue;
END_RCPP
}
// load_arg
XPtr<Encoders > load_arg(List arg_encoder);
RcppExport SEXP _fun_club_load_arg(SEXP arg_encoderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type arg_encoder(arg_encoderSEXP);
    rcpp_result_gen = Rcpp::wrap(load_arg(arg_encoder));
    return rcpp_result_gen;
END_RCPP
}
// dump_arg
List dump_arg(XPtr<Encoders> xptr);
RcppExport SEXP _fun_club_dump_arg(SEXP xptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<Encoders> >::type xptr(xptrSEXP);
    rcpp_result_gen = Rcpp::wrap(dump_arg(xptr));
    return rcpp_result_gen;
END_RCPP
}
// print_arg
void print_arg(XPtr<Encoders> xptr);
RcppExport SEXP _fun_club_print_arg(SEXP xptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<Encoders> >::type xptr(xptrSEXP);
    print_arg(xptr);
    return R_NilValue;
END_RCPP
}
// clear_arg
void clear_arg(XPtr<Encoders> xptr);
RcppExport SEXP _fun_club_clear_arg(SEXP xptrSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< XPtr<Encoders> >::type xptr(xptrSEXP);
    clear_arg(xptr);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fun_club_new_arg_encoder", (DL_FUNC) &_fun_club_new_arg_encoder, 0},
    {"_fun_club_add_arg", (DL_FUNC) &_fun_club_add_arg, 4},
    {"_fun_club_ind_arg", (DL_FUNC) &_fun_club_ind_arg, 3},
    {"_fun_club_printable_arg", (DL_FUNC) &_fun_club_printable_arg, 3},
    {"_fun_club_serialized_arg", (DL_FUNC) &_fun_club_serialized_arg, 3},
    {"_fun_club_rm_arg", (DL_FUNC) &_fun_club_rm_arg, 3},
    {"_fun_club_load_fo_arg", (DL_FUNC) &_fun_club_load_fo_arg, 5},
    {"_fun_club_load_arg", (DL_FUNC) &_fun_club_load_arg, 1},
    {"_fun_club_dump_arg", (DL_FUNC) &_fun_club_dump_arg, 1},
    {"_fun_club_print_arg", (DL_FUNC) &_fun_club_print_arg, 1},
    {"_fun_club_clear_arg", (DL_FUNC) &_fun_club_clear_arg, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_fun_club(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
